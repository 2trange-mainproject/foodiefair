<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.multicampus.foodiefair.dao.IProductDAO">
    <select id="readDao" resultType="com.multicampus.foodiefair.dto.ProductDTO">
        select *, (
            SELECT COUNT(*)
            FROM Saved s
            WHERE s.userId = #{userId} AND s.productId = t.productId
        ) AS saved
        from Product t where productId = #{selectedId}
    </select>

    <select id="readForRecipt" resultType="com.multicampus.foodiefair.dto.ProductDTO">
        select * from Product where productId = #{selectedId}
    </select>

    <update id="updateProductViews">
        update Product set productViews = productViews + 1 where productId = #{selectedId}
    </update>

    <select id="selectFilteredList" resultType="com.multicampus.foodiefair.dto.ProductDTO">
        SELECT t.*,
        (
        SELECT COUNT(*)
        FROM Saved s
        WHERE s.userId = #{userId} AND s.productId = t.productId
        ) AS saved
        FROM (
        SELECT tt.*, @rownum := @rownum + 1 AS row_num
        FROM (
        SELECT *
        FROM Product
        <where>
            <if test="storeFilters != null and storeFilters.size() > 0">
                AND (
                <foreach item="filter" collection="storeFilters" separator="OR">
                    fixedTag LIKE CONCAT('%', #{filter}, '%')
                </foreach>
                )
            </if>
            <if test="categoryFilters != null and categoryFilters.size() > 0">
                AND (
                <foreach item="filter" collection="categoryFilters" separator="OR">
                    fixedTag LIKE CONCAT('%', #{filter}, '%')
                </foreach>
                )
            </if>
            <if test="searchKeyword != null">
                AND productName LIKE CONCAT('%', #{searchKeyword}, '%')
            </if>
        </where>
        ORDER BY
        <choose>
            <when test="sortOrder == 'popularity'">
                (productSaved * 0.7 + productViews * 0.3) DESC
            </when>
            <when test="sortOrder == 'view'">
                productViews DESC
            </when>
            <when test="sortOrder == 'saves'">
                productSaved DESC
            </when>
            <when test="sortOrder == 'reviews'">
                productReviews DESC
            </when>
            <when test="sortOrder == 'releaseDate'">
                releaseDate DESC
            </when>
            <when test="sortOrder == 'lowPrice'">
                productPrice ASC
            </when>
            <when test="sortOrder == 'highPrice'">
                productPrice DESC
            </when>
            <when test="sortOrder == 'highReviewNum'">
                (SELECT COUNT(r.productId) FROM Review r WHERE r.productId = productId AND r.receiptImg = 1) DESC
            </when>
            <when test="sortOrder == 'positiveKeyword'">
                (
                SELECT SUM(value)
                FROM Keyword k
                JOIN JSON_TABLE(k.positiveKeyword, '$.*' COLUMNS (value INT PATH '$')) AS json_values
                WHERE k.productId = productId
                ) DESC
            </when>
            <when test="sortOrder == 'negativeKeyword'">
                (
                SELECT SUM(value)
                FROM Keyword k
                JOIN JSON_TABLE(k.negativeKeyword, '$.*' COLUMNS (value INT PATH '$')) AS json_values
                WHERE k.productId = productId
                ) DESC
            </when>
            <otherwise>
                releaseDate DESC
            </otherwise>
        </choose>
        ) tt, (SELECT @rownum := 0) r
        ) t
        WHERE row_num BETWEEN #{pageRequestDto.skip} + 1 AND #{pageRequestDto.page} * #{pageRequestDto.size}
    </select>

    <select id="getFilteredCount" resultType="int">
        SELECT count(*) FROM (
        SELECT productId FROM Product
        <where>
            <if test="storeFilters != null and storeFilters.size() > 0">
                AND (
                <foreach item="filter" collection="storeFilters" separator="OR">
                    fixedTag LIKE CONCAT('%', #{filter}, '%')
                </foreach>
                )
            </if>
            <if test="categoryFilters != null and categoryFilters.size() > 0">
                AND (
                <foreach item="filter" collection="categoryFilters" separator="OR">
                    fixedTag LIKE CONCAT('%', #{filter}, '%')
                </foreach>
                )
            </if>
            <if test="searchKeyword != null">
                AND productName LIKE CONCAT('%', #{searchKeyword}, '%')
            </if>
        </where>
        ) AS filtered_product
    </select>
</mapper>
